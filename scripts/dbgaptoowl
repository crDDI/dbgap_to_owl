#!/usr/bin/env python

# Copyright (c) 2016, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the Mayo Clinic nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

# Convert a dbGaP compliant XML Schema to an ISO 11179 Compliant OWL representation
import argparse
import os
import sys
from typing import List
import pyxb.binding.generate

if __name__ == "__main__":
    sys.path.append(os.path.join(os.path.join(os.getcwd(), os.path.dirname(__file__)), '..'))
from dbgap_to_owl.schema_wrappers import ElementWrapper

DEFAULT_GAP_ELEMENT = "GaPExchange"


def parse_args(argv: List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Convert XML Schema into RDF")
    parser.add_argument("-i", "--infile", help="Input XML Schema file. If absent, use saved python file")
    parser.add_argument("-o", "--outfile", help="Target RDF Turtle file (default: stdout)")
    parser.add_argument("-p", "--python", help="Target python file for pyxb representation of XML Schema")
    parser.add_argument("-e", "--element",
                        help="Element(s) in schema to turn into RDF (Default: %s)" % DEFAULT_GAP_ELEMENT, nargs='*')
    return parser.parse_args(argv)


def eval_args(args: argparse.Namespace) -> bool:
    if not (args.infile or args.python):
        print("One of infile or python file must be supplied")
        return False
    if not args.element:
        args.element = [DEFAULT_GAP_ELEMENT]
    return True


def generate_python_model(opts: argparse.Namespace) -> str:
    # Generate the python binding for the input XML Schema file
    if opts.infile:
        rval = pyxb.binding.generate.GeneratePython(schema_location=opts.infile)
        if opts.python:
            open(opts.python, 'w').write(rval)
    else:
        rval = open(opts.python).read()
    return rval


def generate_owl(opts_: argparse.Namespace) -> None:
    # Generate a graph of the first element
    # Globals includes the eval statement that occurs further below
    g = ElementWrapper(globals()[opts_.element[0]]).as_rdf()

    # Add the additional element definitions
    for e in opts_.element[1:]:
        ElementWrapper(globals()[e]).as_rdf(g)

    # Serialize the result
    if opts.outfile:
        g.serialize(destination=opts_.outfile, format="turtle")
    else:
        print(g.serialize(format="turtle").decode('utf-8'))


# Note: The eval step of this process has to occur at the file-level and can't be nested inside a function
opts = parse_args(sys.argv[1:])
if eval_args(opts):
    code = generate_python_model(opts)
else:
    sys.exit(0)
eval(compile(code, 'schema', 'exec'))
generate_owl(opts)
